#loc = loc(unknown)
module @penalty_sample_head attributes {module.FLOPs = 2797 : i64, module.chip = "ALL", module.platform = "ONNX", module.state = "TOP_F32", module.top_run_mode = "STATIC", module.weight_file = "penalty_sample_head_top_f32_all_weight.npz"} {
  func.func @main(%arg0: tensor<1x{vocab_size}xf32> loc(unknown), %arg1: tensor<1x{seq_length}xsi32> loc(unknown), %arg2: tensor<1xf32> loc(unknown), %arg3: tensor<1xf32> loc(unknown), %arg4: tensor<1xf32> loc(unknown)) -> (tensor<1x50xf32>, tensor<1x50xf32>) {
    %0 = "top.None"() : () -> none loc(#loc)
    %1 = "top.Input"(%arg0) {do_preprocess = true} : (tensor<1x{vocab_size}xf32>) -> tensor<1x{vocab_size}xf32> loc(#loc1)
    %2 = "top.Input"(%arg1) {do_preprocess = true} : (tensor<1x{seq_length}xsi32>) -> tensor<1x{seq_length}xf32> loc(#loc2)
    %3 = "top.Input"(%arg2) {do_preprocess = true} : (tensor<1xf32>) -> tensor<1xf32> loc(#loc3)
    %4 = "top.Input"(%arg3) {do_preprocess = true} : (tensor<1xf32>) -> tensor<1xf32> loc(#loc4)
    %5 = "top.Input"(%arg4) {do_preprocess = true} : (tensor<1xf32>) -> tensor<1xf32> loc(#loc5)
    %6 = "top.GatherElements"(%1, %2) {axis = 1 : i64} : (tensor<1x{vocab_size}xf32>, tensor<1x{seq_length}xf32>) -> tensor<1x{seq_length}xf32> loc(#loc6)
    %7 = "top.CompareConst"(%6) {const_val = 0.000000e+00 : f64, inversed = false, is_scalar = false, mode = "Less"} : (tensor<1x{seq_length}xf32>) -> tensor<1x{seq_length}xf32> loc(#loc7)
    %8 = "top.Mul"(%6, %5) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<1x{seq_length}xf32>, tensor<1xf32>) -> tensor<1x{seq_length}xf32> loc(#loc8)
    %9 = "top.Div"(%6, %5) {do_relu = false, is_reverse = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<1x{seq_length}xf32>, tensor<1xf32>) -> tensor<1x{seq_length}xf32> loc(#loc9)
    %10 = "top.Where"(%7, %8, %9) {x_const_val = 0.000000e+00 : f64, x_is_const = false, y_const_val = 0.000000e+00 : f64, y_is_const = false} : (tensor<1x{seq_length}xf32>, tensor<1x{seq_length}xf32>, tensor<1x{seq_length}xf32>) -> tensor<1x{seq_length}xf32> loc(#loc10)
    %11 = "top.ScatterElements"(%1, %2, %10) {axis = 1 : i64, nc_can_split = false, reduction = 0 : i64} : (tensor<1x{vocab_size}xf32>, tensor<1x{seq_length}xf32>, tensor<1x{seq_length}xf32>) -> tensor<1x{vocab_size}xf32> loc(#loc11)
    %values, %indices = "top.TopK"(%11) {K = 50 : i64, axis = 1 : i64, largest = true, replace_topk_indices = false, sorted = true} : (tensor<1x{vocab_size}xf32>) -> (tensor<1x50xf32>, tensor<1x50xf32>) loc(#loc23)
    %12 = "top.Div"(%values, %4) {do_relu = false, is_reverse = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<1x50xf32>, tensor<1xf32>) -> tensor<1x50xf32> loc(#loc14)
    %13 = "top.Softmax"(%12) {axis = 1 : si32, beta = 1.000000e+00 : f64, log = false, round_mode = "HalfAwayFromZero"} : (tensor<1x50xf32>) -> tensor<1x50xf32> loc(#loc15)
    %14 = "top.Weight"() : () -> tensor<1xf32> loc(#loc16)
    %15 = "top.CumSum"(%13, %14) {axis = 1 : i64} : (tensor<1x50xf32>, tensor<1xf32>) -> tensor<1x50xf32> loc(#loc17)
    %16 = "top.Compare"(%15, %3) {mode = "Less"} : (tensor<1x50xf32>, tensor<1xf32>) -> tensor<1x50xf32> loc(#loc18)
    %17 = "top.Weight"() : () -> tensor<1x50xf32> loc(#loc19)
    %18 = "top.Add"(%16, %17) {do_relu = false, is_scalar = false, relu_limit = -1.000000e+00 : f64} : (tensor<1x50xf32>, tensor<1x50xf32>) -> tensor<1x50xf32> loc(#loc20)
    %19 = "top.Where"(%18, %12, %0) {x_const_val = 0.000000e+00 : f64, x_is_const = false, y_const_val = -1.000000e+03 : f64, y_is_const = true} : (tensor<1x50xf32>, tensor<1x50xf32>, none) -> tensor<1x50xf32> loc(#loc21)
    %20 = "top.Softmax"(%19) {axis = 1 : si32, beta = 1.000000e+00 : f64, log = false, round_mode = "HalfAwayFromZero"} : (tensor<1x50xf32>) -> tensor<1x50xf32> loc(#loc22)
    return %20, %indices : tensor<1x50xf32>, tensor<1x50xf32> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("m_logits")
#loc2 = loc("input_ids")
#loc3 = loc("top_p")
#loc4 = loc("temperature")
#loc5 = loc("penalty")
#loc6 = loc("/GatherElements_output_0_GatherElements")
#loc7 = loc("/Less_output_0_Less")
#loc8 = loc("/Mul_output_0_Mul")
#loc9 = loc("/Div_output_0_Div")
#loc10 = loc("/Where_output_0_Where")
#loc11 = loc("/ScatterElements_output_0_ScatterElements")
#loc12 = loc("/TopK_output_0_TopK")
#loc13 = loc("token_TopK")
#loc14 = loc("/Div_1_output_0_Div")
#loc15 = loc("/Softmax_output_0_Softmax")
#loc16 = loc("/Constant_2_output_0")
#loc17 = loc("/CumSum_output_0_CumSum")
#loc18 = loc("/Less_1_output_0_Less")
#loc19 = loc("/Constant_3_output_0")
#loc20 = loc("/Add_output_0_Add")
#loc21 = loc("/Where_1_output_0_Where")
#loc22 = loc("probs_Softmax")
#loc23 = loc(fused[#loc12, #loc13])

